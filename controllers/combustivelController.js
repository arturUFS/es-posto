import { Combustivel } from "../models/combustivel.js";
import { FornecedorCombustivel } from "../models/fornecedor_combustivel.js";
import { Abastecimento } from "../models/abastecimento.js";
import { Funcionario } from "../models/funcionario.js";
import { Venda } from "../models/venda.js";
import { Fornecedor } from "../models/fornecedor.js";

function gerarIdCombustivel() {
  return Math.random().toString(36).substring(2, 17); // Gera um ID de 15 caracteres
}

export const combustivelController = {
  index: async (req, res) => {
    try {
      const nomeFuncionario = req.query.nome || "Usu√°rio";
      res.render("Combustivel/combustivel", { nomeFuncionario });
    } catch (err) {
      console.error("‚ùå Erro ao carregar a p√°gina de combust√≠veis:", err);
      res.status(500).send("Erro ao carregar a p√°gina");
    }
  },

  /**
   * Cadastra um novo combustivel no banco de dados
   */
  async cadastrar(req, res) {
    try {
      const {
        tipo: tipocombustivel,
        valorLitro: valorlitro,
        quantidadeDisponivel: qtddisponivel,
        descricao,
        cnpj,
      } = req.body;

      // Verifica se o CNPJ do fornecedor foi enviado corretamente
      if (!cnpj) {
        return res
          .status(400)
          .json({ message: "Selecione um fornecedor v√°lido!" });
      }

      const idcombustivel = gerarIdCombustivel(); // Gerando um ID √∫nico para o combustivel

      //Cadastrar o combust√≠vel
      const novoCombustivel = await Combustivel.create({
        idcombustivel,
        tipocombustivel,
        valorlitro,
        descricao: descricao || null, //Permite que seja opcional
        qtddisponivel,
      });
      console.log("Novo combust√≠vel cadastrado:", novoCombustivel);

      // cria a associa√ß√£o na tabela Fornecedor_combustivel
      await FornecedorCombustivel.create({
        cnpj: cnpj,
        idcombustivel,
      });

      res.json({
        message: "‚úÖ Combust√≠vel cadastrado com sucesso!",
        combustivel: novoCombustivel,
      });
    } catch (error) {
      console.error(" ‚ùå Erro ao cadastrar combust√≠vel:", error);

      res.status(500).json({
        message: "Erro ao cadastrar combust√≠vel",
        error: error.message,
      });
    }
  },

  /**
   * Registra uma venda de combust√≠vel.
   */
  async registrarVenda(req, res) {
    try {
      const {
        dataReg,
        cpfFuncionario,
        litros,
        idCombustivel,
        bomba,
        formaPagamento,
        valorTotal,
      } = req.body;

      // ‚úÖ Valida√ß√£o dos campos obrigat√≥rios
      if (
        !dataReg ||
        !cpfFuncionario ||
        !litros ||
        !idCombustivel ||
        !bomba ||
        !formaPagamento ||
        !valorTotal
      ) {
        console.log(dataReg);
        console.log(cpfFuncionario);
        console.log(litros);
        console.log(idCombustivel);
        console.log(bomba);
        console.log(formaPagamento);
        console.log(valorTotal);
        return res
          .status(400)
          .json({ message: "Todos os campos s√£o obrigat√≥rios!" });
      }

      // ‚úÖ Verificar se o funcion√°rio existe
      const funcionario = await Funcionario.findByPk(cpfFuncionario);
      if (!funcionario) {
        return res.status(404).json({ message: "Funcion√°rio n√£o encontrado!" });
      }

      // ‚úÖ Verificar se o combust√≠vel existe
      const combustivel = await Combustivel.findByPk(idCombustivel);
      if (!combustivel) {
        return res.status(404).json({ message: "Combust√≠vel n√£o encontrado!" });
      }

      // ‚úÖ Verificar se h√° estoque suficiente
      if (combustivel.qtddisponivel < litros) {
        return res
          .status(400)
          .json({ message: "Estoque insuficiente para essa venda!" });
      }

      // ‚úÖ Gerar IDs √∫nicos
      const idAbastecimento = gerarIdCombustivel();
      const idVenda = gerarIdCombustivel();

      // ‚úÖ Registrar o abastecimento
      await Abastecimento.create({
        idabastecimento: idAbastecimento,
        idcombustivel: idCombustivel,
        quantidade: litros,
        valor: valorTotal,
        bomba,
      });

      // ‚úÖ Registrar a venda
      await Venda.create({
        codigo: idVenda,
        data: dataReg,
        valor: valorTotal,
        cpf: cpfFuncionario,
        formapagamento: formaPagamento,
      });

      // ‚úÖ Atualizar o estoque do combust√≠vel
      combustivel.qtddisponivel -= litros;
      await combustivel.save();

      res.json({ message: "‚úÖ Venda registrada com sucesso!" });
    } catch (error) {
      console.error("‚ùå Erro ao registrar venda:", error);
      res
        .status(500)
        .json({ message: "Erro ao registrar venda.", error: error.message });
    }
  },

  /**
   * Lista os combust√≠veis dispon√≠veis para abastecimento.
   */
  async listar(req, res) {
    try {
      const combustiveis = await Combustivel.findAll({
        attributes: [
          "idcombustivel",
          "tipocombustivel",
          "valorlitro",
          "qtddisponivel",
        ],
        include: [
          {
            association: "fornecedores",
            attributes: ["nome"],
            through: { attributes: [] }, // Remove colunas extras da tabela intermedi√°ria
          },
        ],
      });

      // Formata o retorno para exibir corretamente no frontend
      const combustiveisFormatados = combustiveis.map((combustivel) => ({
        idcombustivel: combustivel.idcombustivel,
        tipocombustivel: combustivel.tipocombustivel,
        valorlitro: parseFloat(combustivel.valorlitro),
        qtddisponivel: combustivel.qtddisponivel,
        fornecedor:
          combustivel.fornecedores.length > 0
            ? combustivel.fornecedores[0].nome
            : "Desconhecido",
      }));

      return res.json(combustiveisFormatados);
    } catch (error) {
      console.error("‚ùå Erro ao listar combust√≠veis:", error);
      res.status(500).json({
        message: "Erro ao listar combust√≠veis.",
        error: error.message,
      });
    }
  },

  /**
   * Atualiza o pre√ßo de um combust√≠vel no banco de dados.
   */
  async atualizarPreco(req, res) {
    try {
      const { idcombustivel } = req.params; // ID do combust√≠vel vindo da URL
      const { valorlitro } = req.body; // Novo pre√ßo vindo do frontend

      // Verifica se o ID e o novo valor foram informados
      if (!idcombustivel || !valorlitro) {
        return res.status(400).json({
          message: "ID do combust√≠vel e novo valor s√£o obrigat√≥rios.",
        });
      }

      // Busca o combust√≠vel no banco
      const combustivel = await Combustivel.findByPk(idcombustivel);
      if (!combustivel) {
        return res.status(404).json({ message: "Combust√≠vel n√£o encontrado." });
      }

      // Atualiza o pre√ßo do combust√≠vel
      await combustivel.update({ valorlitro });

      res.json({ message: "‚úÖ Pre√ßo do combust√≠vel atualizado com sucesso!" });
    } catch (error) {
      console.error("‚ùå Erro ao atualizar pre√ßo do combust√≠vel:", error);
      res.status(500).json({
        message: "Erro ao atualizar pre√ßo do combust√≠vel.",
        error: error.message,
      });
    }
  },

  /**
   * Busca os combust√≠veis e seus fornecedores para serem usados no frontend.
   */
  listarCombustiveis: async (req, res) => {
    try {
      const combustiveis = await Combustivel.findAll({
        attributes: ["idcombustivel", "tipocombustivel", "qtddisponivel"],
        include: [
          {
            model: Fornecedor,
            as: "fornecedores",
            attributes: ["nome"],
            through: { attributes: [] }, // Oculta colunas da tabela intermedi√°ria
          },
        ],
      });

      // üîÑ Formatar os dados para o frontend
      const combustiveisFormatados = combustiveis.map((combustivel) => ({
        idcombustivel: combustivel.idcombustivel,
        tipocombustivel: combustivel.tipocombustivel,
        fornecedor:
          combustivel.fornecedores.length > 0
            ? combustivel.fornecedores[0].nome
            : "Desconhecido",
        qtddisponivel: combustivel.qtddisponivel,
      }));

      res.json(combustiveisFormatados);
    } catch (error) {
      console.error("‚ùå Erro ao listar combust√≠veis:", error);
      res.status(500).json({ message: "Erro ao listar combust√≠veis" });
    }
  },
};
