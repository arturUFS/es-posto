<div id="modalListarProdutos" class="modal">
  <div class="modal-content">
    <div class="modal-header">
      <button class="back-button" onclick="fecharModal('modalListarProdutos')">
        <i class="arrow-left"
          ><img src="/assets/Icon (1).png" alt="voltar"
        /></i>
      </button>
      <h2>Listar Produtos</h2>
      <button class="home-button" onclick="window.location.href='/home'">
        <i class="home-icon"
          ><img src="/assets/home-lg-alt 1.png" alt="home"
        /></i>
      </button>
    </div>

    <div class="modal-body">
      <div class="table-container">
        <table class="produtos-table">
          <thead>
            <tr>
              <th onclick="ordenarTabela(0)">Nome</th>
              <th onclick="ordenarTabela(1)">Fornecedor</th>
              <th onclick="ordenarTabela(2)">Quantidade</th>
              <th onclick="ordenarTabela(3)">Valor</th>
              <!-- <th>Ações</th> -->
            </tr>
          </thead>
          <tbody id="produtosTbody">
            <tr>
              <td colspan="5" class="loading-message">
                Nenhum funcionário encontrado.
              </td>
            </tr>
            <!-- CPF já formatado no Controller -->
            <!-- <td class="action-buttons">
                  <button class="view-button">
                    <i class="eye-icon"
                      ><img src="/assets/Icon.png" alt="consultar" width="40%"
                    /></i>
                  </button>
                  <button class="edit-button">
                    <i class="edit-icon"
                      ><img src="/assets/Vector (3).png" alt="editar" width="30%"
                    /></i>
                  </button>
                  <button class="delete-button">
                    <i class="delete-icon"
                      ><img
                        src="/assets/Vector (4).png"
                        alt="excluir"
                        width="30%"
                    /></i>
                  </button>
                </td> -->
          </tbody>
        </table>
      </div>
    </div>
  </div>
</div>
<script>
  // ✅ Função para carregar os produtos
  async function carregarProdutos() {
    try {
      const response = await fetch("/produtos/listagem");
      if (!response.ok) throw new Error("Erro ao carregar produtos.");

      const produtos = await response.json();
      const tabela = document.getElementById("produtosTbody");
      tabela.innerHTML = ""; // Limpa antes de preencher

      if (produtos.length === 0) {
        tabela.innerHTML =
          '<tr><td colspan="4" class="loading-message">Nenhum produto encontrado.</td></tr>';
        return;
      }

      produtos.forEach((produto) => {
        const tr = document.createElement("tr");
        tr.innerHTML = `
          <td>${produto.nome}</td>
          <td>${produto.fornecedor}</td>
          <td>${produto.quantidade}</td>
          <td>R$ ${produto.valor}</td>
        `;
        tabela.appendChild(tr);
      });
    } catch (error) {
      console.error("❌ Erro ao carregar produtos:", error);
    }
  }

  // ✅ Carrega os produtos ao abrir o modal
  document.addEventListener("DOMContentLoaded", carregarProdutos);

  let direcaoOrdenacao = {}; // Guarda a direção de ordenação para cada coluna

  function ordenarTabela(colunaIndex) {
    const tabela = document.querySelector(".produtos-table tbody");
    const linhas = Array.from(tabela.querySelectorAll("tr"));

    // Alterna entre crescente (asc) e decrescente (desc)
    direcaoOrdenacao[colunaIndex] = !direcaoOrdenacao[colunaIndex]
      ? "asc"
      : direcaoOrdenacao[colunaIndex] === "asc"
      ? "desc"
      : "asc";
    const direcao = direcaoOrdenacao[colunaIndex];

    linhas.sort((a, b) => {
      let valorA = a.cells[colunaIndex].textContent.trim();
      let valorB = b.cells[colunaIndex].textContent.trim();

      // Se for a coluna do CNPJ, remove caracteres especiais
      if (colunaIndex === 3) {
        valorA = valorA.replace(/\D/g, ""); // Remove tudo que não for número
        valorB = valorB.replace(/\D/g, "");
      }

      // Converte para número se for possível
      let numeroA = parseFloat(valorA.replace(",", "."));
      let numeroB = parseFloat(valorB.replace(",", "."));

      if (!isNaN(numeroA) && !isNaN(numeroB)) {
        return direcao === "asc" ? numeroA - numeroB : numeroB - numeroA;
      }

      return direcao === "asc"
        ? valorA.localeCompare(valorB)
        : valorB.localeCompare(valorA);
    });

    // Reanexando as linhas ordenadas na tabela
    linhas.forEach((linha) => tabela.appendChild(linha));
  }
</script>
