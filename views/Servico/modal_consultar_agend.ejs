<div id="modalConsultarAgendamento" class="modal">
    <div class="modal-content">
      <div class="modal-header">
        <button class="back-button" onclick="fecharOuVoltarAgendamento()">
          <i class="arrow-left"><img src="/assets/Icon (1).png" alt="voltar"/></i>
        </button>
        <h2>Consultar Agendamento</h2>
        <button class="home-button" onclick="window.location.href='/home'">
          <i class="home-icon"><img src="/assets/home-lg-alt 1.png" alt="home"/></i>
        </button>
      </div>
  
      <div class="modal-body">
        <!-- Tela de Consulta -->
        <div id="telaConsultaAgendamento" class="center-content">
          <form id="consultaFormAgendamento">
            <div class="form-group">
              <label for="agendamentoSelect">Agendamento:</label>
              <select id="agendamentoSelect" required>
                <option value="" disabled selected>Selecione o agendamento</option>
              </select>
            </div>
            <div class="form-btn-cons" style="margin-top: 20px">
              <button type="button" class="consultar-btn" onclick="consultarAgendamento()">
                Consultar
              </button>
            </div>
          </form>
        </div>
        
        <!-- Tela de Resultado -->
        <div id="resultadoConsultaAgendamento" style="display: none;">
          <form id="formConsultarAgendamento">
            <div class="form-row">
              <div class="form-group">
                <label for="dataAgendamento">Data:</label>
                <input type="text" id="dataAgendamento" readonly />
              </div>
              <div class="form-group">
                <label for="horaAgendamento">Hora:</label>
                <input type="text" id="horaAgendamento" readonly />
              </div>
              <div class="action-buttons">
                <button type="button" class="edit-btn" onclick="habilitarEdicaoAgendamento()">
                  <i class="edit-icon"><img id="lapisAgendamento" src="/assets/Vector (3).png" alt="editar"/></i>
                </button>
                <button type="button" class="delete-btn" onclick="confirmarExclusaoAgendamento()">
                  <i class="delete-icon"><img src="/assets/Vector (4).png" alt="excluir"/></i>
                </button>
              </div>
            </div>
  
            <div class="form-row">
              <div class="form-group">
                <label for="servicoAgendamento">Serviço:</label>
                <input type="text" id="servicoAgendamento" readonly />
              </div>
              <div class="form-group">
                <label for="statusAgendamento">Status:</label>
                <select id="statusAgendamento" disabled>
                  <option value="Agendado">Agendado</option>
                  <option value="Em andamento">Em andamento</option>
                  <option value="Concluído">Concluído</option>
                  <option value="Cancelado">Cancelado</option>
                </select>
              </div>
            </div>
  
            <div class="form-row">
              <div class="form-group">
                <label for="veiculoAgendamento">Veículo:</label>
                <input type="text" id="veiculoAgendamento" readonly />
              </div>
              <div class="form-group">
                <label for="responsavelAgendamento">Responsável:</label>
                <input type="text" id="responsavelAgendamento" readonly />
              </div>
            </div>
  
            <div class="form-row">
              <div class="form-group" style="flex-basis: 100%">
                <label>Funcionários Alocados:</label>
                <div id="funcionariosAgendamento" class="funcionarios-list"></div>
              </div>
            </div>
  
            <div class="form-row">
              <div class="form-group" style="flex-basis: 100%">
                <label for="valorAgendamento">Valor Total:</label>
                <input type="text" id="valorAgendamento" readonly />
              </div>
            </div>
  
            <div id="botoesEdicaoAgendamento" style="display: none">
              <div class="form-btn-res">
                <button type="button" class="save-btn" onclick="salvarAlteracoesAgendamento()">
                  Salvar
                </button>
                <button type="button" class="cancel-btn" onclick="cancelarEdicaoAgendamento()">
                  Cancelar
                </button>
              </div>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
  
  <script>
    // Carrega os agendamentos ao abrir o modal
    document.addEventListener("DOMContentLoaded", function() {
      carregarAgendamentos();
    });
  
    // Função para carregar os agendamentos no select
    async function carregarAgendamentos() {
      try {
        const response = await fetch("/agendamentos/listar");
        if (response.ok) {
          const agendamentos = await response.json();
          const selectAgendamento = document.getElementById("agendamentoSelect");
  
          selectAgendamento.innerHTML = '<option value="" disabled selected>Selecione o agendamento</option>';
  
          agendamentos.forEach(agendamento => {
            const option = document.createElement("option");
            option.value = agendamento.idagendamento;
            option.textContent = `${formatarData(agendamento.data)} - ${agendamento.servico?.tiposervico || 'Sem serviço'}`;
            selectAgendamento.appendChild(option);
          });
        }
      } catch (error) {
        console.log("Carregando agendamentos...");
      }
    }
  
    // Consulta um agendamento específico
    async function consultarAgendamento() {
      const idAgendamento = document.getElementById("agendamentoSelect").value;
  
      if (!idAgendamento) {
        alert("Por favor, selecione um agendamento.");
        return;
      }
  
      try {
        const response = await fetch(`/agendamentos/consultar/${idAgendamento}`);
        if (!response.ok) throw new Error("Agendamento não encontrado.");
  
        const { agendamento, funcionarios } = await response.json();
  
        // Preenche os campos
        document.getElementById("dataAgendamento").value = formatarData(agendamento.data);
        document.getElementById("horaAgendamento").value = agendamento.hora || "Não informado";
        document.getElementById("servicoAgendamento").value = agendamento.servico?.tiposervico || "Não informado";
        document.getElementById("statusAgendamento").value = agendamento.status;
        document.getElementById("veiculoAgendamento").value = agendamento.veiculo ? `${agendamento.veiculo.modelo} (${agendamento.veiculo.placa})` : "Não informado";
        document.getElementById("responsavelAgendamento").value = agendamento.veiculo?.nomeResponsavel || "Não informado";
        document.getElementById("valorAgendamento").value = agendamento.valor ? `R$ ${parseFloat(agendamento.valor).toFixed(2).replace(".", ",")}` : "R$ 0,00";
  
        // Preenche a lista de funcionários
        const funcionariosDiv = document.getElementById("funcionariosAgendamento");
        funcionariosDiv.innerHTML = funcionarios && funcionarios.length > 0 ? 
          funcionarios.map(func => 
            `<div class="funcionario-item">${func.nome} (${func.cpf})</div>`
          ).join("") : "<div class='funcionario-item'>Nenhum funcionário alocado</div>";
  
        // Mostra resultado e esconde consulta
        document.getElementById("telaConsultaAgendamento").style.display = "none";
        document.getElementById("resultadoConsultaAgendamento").style.display = "block";
      } catch (error) {
        alert(error.message);
      }
    }
  
    // Função para habilitar edição
    function habilitarEdicaoAgendamento() {
      document.getElementById("statusAgendamento").disabled = false;
      document.getElementById("botoesEdicaoAgendamento").style.display = "block";
      document.getElementById("lapisAgendamento").style.visibility = "hidden";
    }
  
    // Função para salvar alterações
    async function salvarAlteracoesAgendamento() {
      const idAgendamento = document.getElementById("agendamentoSelect").value;
      const status = document.getElementById("statusAgendamento").value;
  
      try {
        const response = await fetch(`/agendamentos/atualizar/${idAgendamento}`, {
          method: "PUT",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            status
          }),
        });
  
        if (!response.ok) throw new Error("Erro ao atualizar agendamento.");
  
        alert("Agendamento atualizado com sucesso!");
        cancelarEdicaoAgendamento();
      } catch (error) {
        alert(error.message);
      }
    }
  
    // Função para cancelar edição
    function cancelarEdicaoAgendamento() {
      document.getElementById("statusAgendamento").disabled = true;
      document.getElementById("botoesEdicaoAgendamento").style.display = "none";
      document.getElementById("lapisAgendamento").style.visibility = "visible";
    }
  
    // Função para confirmar exclusão
    function confirmarExclusaoAgendamento() {
      const idAgendamento = document.getElementById("agendamentoSelect").value;
      
      if (!idAgendamento) {
        alert("Nenhum agendamento selecionado para exclusão.");
        return;
      }
  
      if (confirm("Tem certeza que deseja excluir este agendamento?")) {
        excluirAgendamento(idAgendamento);
      }
    }
  
    // Função para excluir agendamento
    async function excluirAgendamento(idAgendamento) {
      try {
        const response = await fetch(`/agendamentos/excluir/${idAgendamento}`, {
          method: "DELETE"
        });
  
        if (!response.ok) throw new Error("Erro ao excluir agendamento.");
  
        alert("Agendamento excluído com sucesso!");
        fecharOuVoltarAgendamento();
      } catch (error) {
        alert(error.message);
      }
    }
  
    // Função auxiliar para formatar data
    function formatarData(dataString) {
      const data = new Date(dataString);
      return data.toLocaleDateString('pt-BR');
    }
  
    // Função para fechar ou voltar
    function fecharOuVoltarAgendamento() {
      const resultado = document.getElementById("resultadoConsultaAgendamento");
      const consulta = document.getElementById("telaConsultaAgendamento");
  
      if (resultado.style.display !== "none") {
        resultado.style.display = "none";
        consulta.style.display = "flex";
        cancelarEdicaoAgendamento();
      } else {
        document.getElementById("modalConsultarAgendamento").style.display = "none";
      }
  
      document.getElementById("consultaFormAgendamento").reset();
      document.getElementById("formConsultarAgendamento").reset();
      document.getElementById("agendamentoSelect").value = "";
    }
  </script>