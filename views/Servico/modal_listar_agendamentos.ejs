<div id="modalListarAgendamentos" class="modal">
  <div class="modal-content">
    <div class="modal-header">
      <button
        class="back-button"
        onclick="fecharModal('modalListarAgendamentos')"
      >
        <i class="arrow-left"
          ><img src="/assets/Icon (1).png" alt="voltar"
        /></i>
      </button>
      <h2>Listar Agendamentos</h2>
      <button class="home-button" onclick="window.location.href='/home'">
        <i class="home-icon"
          ><img src="/assets/home-lg-alt 1.png" alt="home"
        /></i>
      </button>
    </div>

    <div class="modal-body">
      <div class="table-container">
        <table class="agendamento-table">
          <thead>
            <tr>
              <th onclick="ordenarTabela(0)">Data</th>
              <th onclick="ordenarTabela(1)">Tipo de serviço</th>
              <th onclick="ordenarTabela(2)">Placa</th>
              <th onclick="ordenarTabela(3)">Status</th>
              <!-- <th>Ações</th> -->
            </tr>
          </thead>
          <tbody id="agendamentosTbody">
            <tr>
              <td colspan="5" class="loading-message">
                Nenhum agendamento encontrado.
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>
  </div>
</div>
<script>
  // ✅ Função para carregar os agendamentos
  async function carregarAgendamentos() {
    try {
      const response = await fetch("/servico/listar_agendamentos");
      if (!response.ok) throw new Error("Erro ao carregar os agendamentos.");

      const agendamentos = await response.json();
      const tabela = document.getElementById("agendamentosTbody");
      tabela.innerHTML = ""; // Limpa antes de preencher

      if (agendamentos.length === 0) {
        tabela.innerHTML =
          '<tr><td colspan="4" class="loading-message">Nenhum serviço encontrado.</td></tr>';
        return;
      }
      const mapaServicos = await buscarServicos();
     
      agendamentos.forEach((agendamento) => {
        const tr = document.createElement("tr");

        const dataFormatada = formatarData(agendamento.data);
        const statusFormatado = formatarStatus(agendamento.status);
        const nomeServico =
          mapaServicos[agendamento.idservico] || "Serviço não encontrado";
  
        tr.innerHTML = `
        <td>${dataFormatada}</td>
        <td>${nomeServico}</td>
        <td>${agendamento.idplaca}</td>
        <td>${statusFormatado}</td>
        <td class="action-buttons">
            <button class="view-button" onclick="consultarAgendamentoListar('${agendamento.idagendamento}')">
                <img src="/assets/Icon.png" alt="Consultar" width="16">
            </button>
            <button class="edit-button" onclick="editarAgendamentoListar('${agendamento.idagendamento}')">
                <img src="/assets/Vector (3).png" alt="Editar" width="16">
            </button>
            <button class="delete-button" onclick="confirmarExclusaoAgendamentoListar('${agendamento.idagendamento}', '${agendamento.idplaca}')">
                <img src="/assets/Vector (4).png" alt="Excluir" width="16">
            </button>
          </td>
      `;
        tabela.appendChild(tr);
      });
    } catch (error) {
      console.error("❌ Erro ao carregar agendamentos:", error);
    }
  }

  // Função para buscar os serviços e criar o mapa
  async function buscarServicos() {
    try {
      const servicosResponse = await fetch("/servico/listar");
      if (!servicosResponse.ok)
        throw new Error("Erro ao carregar os serviços.");

      const servicos = await servicosResponse.json();

      // Criação de um mapa de idservico para tiposervico
      const mapaServicos = servicos.reduce((acc, servico) => {
        acc[servico.idservico] = servico.tiposervico;
        return acc;
      }, {});

      return mapaServicos;
    } catch (error) {
      console.error("❌ Erro ao carregar os serviços:", error);
      return {};
    }
  }

  // Função para formatar a data no formato dd/mm/yyyy
  function formatarData(dataISO) {
    const data = new Date(dataISO);
    return data.toLocaleDateString("pt-BR", {
      day: "2-digit",
      month: "2-digit",
      year: "numeric",
    });
  }

  // Função para formatar o status (cores e capitalizar)
  function formatarStatus(status) {
    const cores = {
      pendente: "orange",
      concluído: "green",
      em_andamento: "#b68d2e",
      cancelado: "red",
    };
    if (status == "em_andamento") {
      status = "em andamento";
    }

    const statusCapitalizado = status
      .toLowerCase()
      .split(" ")
      .map((palavra) => palavra.charAt(0).toUpperCase() + palavra.slice(1))
      .join(" ");

    return `<span style="color:${
      cores[status] || "black"
    }; font-weight: bold;">${statusCapitalizado}</span>`;
  }

  // ✅ Carrega os agendamentos ao abrir o modal
  document.addEventListener("DOMContentLoaded", carregarAgendamentos);

  let direcaoOrdenacao = {}; // Guarda a direção de ordenação para cada coluna

  function ordenarTabela(colunaIndex) {
    const tabela = document.querySelector(".agendamento-table tbody");
    const linhas = Array.from(tabela.querySelectorAll("tr"));

    // Alterna entre crescente (asc) e decrescente (desc)
    direcaoOrdenacao[colunaIndex] = !direcaoOrdenacao[colunaIndex]
      ? "asc"
      : direcaoOrdenacao[colunaIndex] === "asc"
      ? "desc"
      : "asc";
    const direcao = direcaoOrdenacao[colunaIndex];

    linhas.sort((a, b) => {
      let valorA = a.cells[colunaIndex].textContent.trim();
      let valorB = b.cells[colunaIndex].textContent.trim();

      // Converte para número se for possível
      let numeroA = parseFloat(valorA.replace(",", "."));
      let numeroB = parseFloat(valorB.replace(",", "."));

      if (!isNaN(numeroA) && !isNaN(numeroB)) {
        return direcao === "asc" ? numeroA - numeroB : numeroB - numeroA;
      }

      return direcao === "asc"
        ? valorA.localeCompare(valorB)
        : valorB.localeCompare(valorA);
    });

    // Reanexando as linhas ordenadas na tabela
    linhas.forEach((linha) => tabela.appendChild(linha));
  }

  // Consulta um agendamento específico
  async function consultarAgendamentoListar(idAgendamento) {
      
  
      if (!idAgendamento) {
        alert("Por favor, selecione um agendamento.");
        return;
      }
  
      try {
        const response = await fetch(`/servico/agendamentos/${idAgendamento}`);
        if (!response.ok) throw new Error("Agendamento não encontrado.");
  
        const { agendamento, funcionario, veiculo, servico, venda } = await response.json();
    

      //Preenche os dados
      document.getElementById("agendamentoSelect").value = idAgendamento;

      //Preenche os dados
      document.getElementById("dataServico3").value = agendamento.data.split('T')[0];
      // Preenche hora (formato HH:MM)
      document.getElementById("horaServico3").value = agendamento.hora || "00:00";

      document.getElementById("valor3").value = `R$ ${parseFloat(agendamento.valor)
      .toFixed(2)
      .replace(".", ",")}`;

      // Preenche select "servico" (supondo que servico.id_servico seja o value da opção)
      document.getElementById("servico3").value = servico.tiposervico;

      // Preenche funcionário (CPF)
      document.getElementById("funcionario3").value = funcionario.cpf || "";

      // Preenche status
      document.getElementById("status3").value = agendamento.status || "pendente";

        // Preenche as formas de pagamento
        const formasPagamento = venda.formapagamento; 
        const checkboxes = document.querySelectorAll('input[name="pagamento"]');

        checkboxes.forEach(checkbox => {
            if (formasPagamento.includes(checkbox.value)) {
                checkbox.checked = true;
            } else {
                checkbox.checked = false;
            }
        });

        document.getElementById("placa3").value = veiculo.idplaca;
        document.getElementById("nome3").value = veiculo.nomeresponsavel || "Não informado";
        document.getElementById("telefone3").value = veiculo.telefone || "Não informado";
        document.getElementById("dataEntrada3").value = veiculo.dataentrada || "Não informado";
        document.getElementById("tipoVeiculo3").value = veiculo.tipoveiculo || "Não informado";
        document.getElementById("ano3").value = veiculo.ano || "Não informado";
        document.getElementById("cor3").value = veiculo.cor || "Não informado";
        document.getElementById("modelo3").value = veiculo.modelo || "Não informado";

        fecharModal("modalListarAgendamentos"); // Fecha o modal de listagem
        document.getElementById("modalConsultarAgendamento").style.display = "block"; // Abre o modal de consulta
        document.getElementById("telaConsultaAgendamento").style.display = "block"; // Mostra tela de consulta
        
    
        // Mostra resultado e esconde consulta
        document.getElementById("telaConsultaAgendamento").style.display = "none";
        document.getElementById("resultadoConsultaAgendamento").style.display = "block";
      } catch (error) {
        alert(error.message);
      }
    }

    function editarAgendamentoListar(idagendamento) {
        consultarAgendamentoListar(idagendamento); // Carrega os dados no modal
        habilitarEdicao(); // Habilita a edição diretamente
    }

  function confirmarExclusaoAgendamentoListar(idagendamento, idplaca) {
    if (
      confirm(
        `Tem certeza que deseja excluir o agendamento do carro ${idplaca} (id: ${idagendamento})?`
      )
    ) {
      excluirAgendamentoListar(idagendamento);
    }
  }
   function excluirAgendamentoListar(idagendamento) {
        fetch(`/servico/excluir_agendamento/${idagendamento}`, { method: 'DELETE' })
            .then(response => {
            if (response.ok) {
                alert('Agendamento excluído com sucesso!');
                carregarAgendamentos(); // Recarrega a lista
            } else {
                throw new Error('Erro ao excluir');
            }
            })
            .catch(error => {
            alert('Falha na exclusão: ' + error.message);
            });
    }
</script>
